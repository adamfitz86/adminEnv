import { createLintRule } from '../utils/create-rule';
import { errorBoundary } from '../utils/error-boundary';
import { hasProp } from './checks/has-prop';
import { createIsFromImportSourceFor } from './checks/is-from-import-source';
const rule = createLintRule({
  meta: {
    name: 'no-custom-icons',
    type: 'problem',
    docs: {
      description: 'Enforces custom glyph icons are used.',
      recommended: false,
      severity: 'warn'
    },
    schema: [{
      type: 'object',
      properties: {
        centralLocation: {
          type: 'string'
        },
        failSilently: {
          type: 'boolean'
        }
      },
      additionalProperties: false
    }],
    messages: {
      noCustomIcons: `Custom icons from {{importSource}} are no longer supported. Migrate to an icon from '@atlaskit/(icon-labs|icon/core|icon/utility)'{{locationMessage}}.
[Migration guide](https://hello.atlassian.net/wiki/spaces/DST/pages/3748692796/New+ADS+iconography+-+Code+migration+guide).`
    }
  },
  create(context) {
    var _context$options$;
    const isIconBase = createIsFromImportSourceFor('@atlaskit/icon', '@atlaskit/icon/base');

    // TODO: JFP-2823 - this type cast was added due to Jira's ESLint v9 migration
    const {
      centralLocation = '',
      failSilently = false
    } = (_context$options$ = context.options[0]) !== null && _context$options$ !== void 0 ? _context$options$ : {};
    const locationMessage = centralLocation ? `, move the icon to '${centralLocation}', or, if it's a third party logo, migrate to a standard <svg> element with a \`label\`.` : '';
    return errorBoundary({
      JSXElement(node) {
        var _isIconBase$getImport;
        if (!isIconBase(node) || !hasProp(node, 'glyph')) {
          return;
        }
        const importSource = (_isIconBase$getImport = isIconBase.getImportSource(node)) !== null && _isIconBase$getImport !== void 0 ? _isIconBase$getImport : '';
        context.report({
          node: node.openingElement,
          messageId: 'noCustomIcons',
          data: {
            importSource,
            locationMessage
          }
        });
      },
      ImportDeclaration: isIconBase.importDeclarationHook
    }, failSilently);
  }
});
export default rule;