"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeStyleDeclarations = void 0;
const t = __importStar(require("@babel/types"));
const is_automatic_runtime_1 = require("./is-automatic-runtime");
const is_create_element_1 = require("./is-create-element");
/**
 * Returns the children of a `jsx()` call expression.
 *
 * @param node
 * @returns
 */
const getJsxRuntimeChildren = (node) => {
    const props = node.arguments[1];
    const children = [];
    if (t.isObjectExpression(props)) {
        props.properties.forEach((prop) => {
            if (t.isObjectProperty(prop) && t.isExpression(prop.value)) {
                children.push(prop.value);
            }
        });
    }
    return children;
};
/**
 * Returns the value of a binding.
 *
 * @param identifierName
 * @param parentPath
 */
const getBindingValue = (identifierName, parentPath) => {
    const binding = parentPath.scope.getBinding(identifierName);
    if (binding && t.isVariableDeclarator(binding.path.node)) {
        const value = binding.path.node.init;
        if (value !== null && value !== undefined) {
            return [binding, value];
        }
    }
    return [undefined, undefined];
};
/**
 * Will remove found style declarations tied to the passed in `node`,
 * and callback with any found.
 *
 * @param node
 * @param parentPath
 * @param pass
 */
const removeStyleDeclarations = (node, parentPath, pass) => {
    const processElement = (element) => {
        if (!t.isIdentifier(element)) {
            return;
        }
        const [binding, bindingValue] = getBindingValue(element.name, parentPath);
        if (binding && bindingValue && t.isStringLiteral(bindingValue)) {
            pass.styleRules.push(bindingValue.value);
            binding.path.remove();
        }
    };
    if (t.isCallExpression(node) && (0, is_create_element_1.isCreateElement)(node.callee)) {
        // We've found something that looks like React.createElement(CS)
        const children = node.arguments[2];
        if (t.isArrayExpression(children)) {
            for (const element of children.elements) {
                processElement(element);
            }
        }
        return;
    }
    if ((0, is_automatic_runtime_1.isAutomaticRuntime)(node, 'jsx')) {
        // We've found something that looks like _jsx(CS)
        const [styles] = getJsxRuntimeChildren(node);
        if (t.isArrayExpression(styles)) {
            for (const element of styles.elements) {
                processElement(element);
            }
        }
        return;
    }
    if (t.isJSXElement(node) &&
        t.isJSXIdentifier(node.openingElement.name) &&
        node.openingElement.name.name === 'CS') {
        // We've found something that looks like <CS>
        const [styles] = node.children;
        if (t.isJSXExpressionContainer(styles) && t.isArrayExpression(styles.expression)) {
            for (const element of styles.expression.elements) {
                processElement(element);
            }
        }
        return;
    }
};
exports.removeStyleDeclarations = removeStyleDeclarations;
//# sourceMappingURL=remove-style-declarations.js.map