"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDefaultResolver = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = require("path");
const enhanced_resolve_1 = require("enhanced-resolve");
function createDefaultResolver(config) {
    var _a;
    const resolver = enhanced_resolve_1.ResolverFactory.createResolver(Object.assign(Object.assign(Object.assign({ 
        // @ts-expect-error - enhanced-resolve CachedInputFileSystem types are not
        // compatible with @types/node fs types
        fileSystem: new enhanced_resolve_1.CachedInputFileSystem(fs_1.default, 4000) }, (config.extensions && {
        extensions: config.extensions,
    })), ((_a = config.resolve) !== null && _a !== void 0 ? _a : {})), { 
        // This makes the resolver invoke the callback synchronously
        useSyncFileSystemCalls: true }));
    return {
        // The resolver needs to be synchronous, as babel plugins must be synchronous
        resolveSync(context, request) {
            return resolver.resolveSync({}, (0, path_1.dirname)(context), request);
        },
    };
}
exports.createDefaultResolver = createDefaultResolver;
//# sourceMappingURL=utils.js.map