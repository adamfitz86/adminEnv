"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const plugin_1 = require("@parcel/plugin");
const source_map_1 = __importDefault(require("@parcel/source-map"));
function findTargetSourcePositions(source, regex) {
    const lines = source.split('\n');
    const results = [];
    for (let i = 0; i < lines.length; i++) {
        const line = lines[i];
        const matches = line.matchAll(regex);
        for (const match of matches) {
            if (match && match.index != null) {
                results.push({
                    source: match[0],
                    groups: match.groups,
                    line: i,
                    column: match.index,
                });
            }
        }
    }
    return results;
}
exports.default = new plugin_1.Transformer({
    async transform({ asset, options }) {
        var _a, _b;
        let code = await asset.getCode();
        if (code.indexOf('.compiled.css') < 0) {
            // Early exit if no relevant files
            return [asset];
        }
        let map = await asset.getMap();
        for (const match of findTargetSourcePositions(code, /(import ['"](?<importSpec>.+\.compiled\.css)['"];)|(require\(['"](?<requireSpec>.+\.compiled\.css)['"]\);)/g)) {
            const specifierPath = ((_a = match.groups) === null || _a === void 0 ? void 0 : _a.importSpec) || ((_b = match.groups) === null || _b === void 0 ? void 0 : _b.requireSpec);
            if (!specifierPath)
                continue;
            if (options.env.sourceMap) {
                if (!map)
                    map = new source_map_1.default(options.projectRoot);
                map.offsetColumns(match.line + 1, match.column + match.source.length, -match.source.length);
            }
            code = code.replace(match.source, '');
            const cssFilePath = (0, path_1.isAbsolute)(specifierPath)
                ? specifierPath
                : (0, path_1.join)((0, path_1.dirname)(asset.filePath), specifierPath);
            const cssContent = (await asset.fs.readFile(cssFilePath)).toString().split('\n');
            if (!asset.meta.styleRules) {
                asset.meta.styleRules = [];
            }
            asset.meta.styleRules.push(...cssContent);
        }
        asset.setCode(code);
        if (map) {
            asset.setMap(map);
        }
        return [asset];
    },
});
//# sourceMappingURL=index.js.map