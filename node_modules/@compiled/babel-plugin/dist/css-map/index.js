"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.visitCssMapPath = void 0;
const t = __importStar(require("@babel/types"));
const ast_1 = require("../utils/ast");
const css_builders_1 = require("../utils/css-builders");
const css_map_1 = require("../utils/css-map");
const transform_css_items_1 = require("../utils/transform-css-items");
const process_selectors_1 = require("./process-selectors");
/**
 * Takes `cssMap` function expression and then transforms it to a record of class names and sheets.
 *
 * For example:
 * ```
 * const styles = cssMap({
 *    none: { color: 'red' },
 *    solid: { color: 'green' },
 * });
 * ```
 * gets transformed to
 * ```
 * const styles = {
 *    danger: "_syaz5scu",
 *    success: "_syazbf54",
 * };
 * ```
 *
 * @param path {NodePath} The path to be evaluated.
 * @param meta {Metadata} Useful metadata that can be used during the transformation
 */
const visitCssMapPath = (path, meta) => {
    // We don't support tagged template expressions.
    if (t.isTaggedTemplateExpression(path.node)) {
        throw (0, ast_1.buildCodeFrameError)((0, css_map_1.createErrorMessage)(css_map_1.ErrorMessages.DEFINE_MAP), path.node, meta.parentPath);
    }
    // We need to ensure CSS Map is declared at the top-most scope of the module.
    if (!t.isVariableDeclarator(path.parent) || !t.isIdentifier(path.parent.id)) {
        throw (0, ast_1.buildCodeFrameError)((0, css_map_1.createErrorMessage)(css_map_1.ErrorMessages.DEFINE_MAP), path.node, meta.parentPath);
    }
    // We need to ensure cssMap receives only one argument.
    if (path.node.arguments.length !== 1) {
        throw (0, ast_1.buildCodeFrameError)((0, css_map_1.createErrorMessage)(css_map_1.ErrorMessages.NUMBER_OF_ARGUMENT), path.node, meta.parentPath);
    }
    // We need to ensure the argument is an objectExpression.
    if (!t.isObjectExpression(path.node.arguments[0])) {
        throw (0, ast_1.buildCodeFrameError)((0, css_map_1.createErrorMessage)(css_map_1.ErrorMessages.ARGUMENT_TYPE), path.node, meta.parentPath);
    }
    const totalSheets = [];
    path.replaceWith(t.objectExpression(path.node.arguments[0].properties.map((property) => {
        (0, css_map_1.errorIfNotValidObjectProperty)(property, meta);
        if (!t.isObjectExpression(property.value)) {
            throw (0, ast_1.buildCodeFrameError)((0, css_map_1.createErrorMessage)(css_map_1.ErrorMessages.STATIC_VARIANT_OBJECT), property.value, meta.parentPath);
        }
        const processedPropertyValue = (0, process_selectors_1.mergeExtendedSelectorsIntoProperties)(property.value, meta);
        const { css, variables } = (0, css_builders_1.buildCss)(processedPropertyValue, meta);
        if (variables.length) {
            throw (0, ast_1.buildCodeFrameError)((0, css_map_1.createErrorMessage)(css_map_1.ErrorMessages.STATIC_VARIANT_OBJECT), property.value, meta.parentPath);
        }
        const { sheets, classNames } = (0, transform_css_items_1.transformCssItems)(css, meta);
        totalSheets.push(...sheets);
        if (classNames.length > 1) {
            throw (0, ast_1.buildCodeFrameError)((0, css_map_1.createErrorMessage)(css_map_1.ErrorMessages.STATIC_VARIANT_OBJECT), property, meta.parentPath);
        }
        return t.objectProperty(property.key, classNames[0] || t.stringLiteral(''));
    })));
    // We store sheets in the meta state so that we can use it later to generate Compiled component.
    meta.state.cssMap[path.parent.id.name] = totalSheets;
};
exports.visitCssMapPath = visitCssMapPath;
//# sourceMappingURL=index.js.map