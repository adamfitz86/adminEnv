"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.hoistSheet = void 0;
const t = __importStar(require("@babel/types"));
/*
 * Hoists a sheet to the top of the module if its not already there.
 * Returns the referencing identifier.
 *
 * @param sheet {string} Stylesheet
 * @param meta {Metadata} Useful metadata that can be used during the transformation
 */
const hoistSheet = (sheet, meta) => {
    if (meta.state.sheets[sheet]) {
        return meta.state.sheets[sheet];
    }
    const sheetIdentifier = meta.parentPath.scope.generateUidIdentifier('');
    const parent = meta.parentPath.findParent((path) => path.isProgram());
    const parentBody = parent && parent.get('body');
    const path = parentBody && parentBody.filter((path) => !path.isImportDeclaration())[0];
    if (path) {
        const kind = 'const';
        const newVariable = t.variableDeclarator(sheetIdentifier, t.stringLiteral(sheet));
        path.insertBefore(t.variableDeclaration(kind, [newVariable])).forEach((newVariable) => {
            // Register the binding so it's now available in scope.
            meta.parentPath.scope.registerBinding(kind, newVariable);
        });
    }
    meta.state.sheets[sheet] = sheetIdentifier;
    return sheetIdentifier;
};
exports.hoistSheet = hoistSheet;
//# sourceMappingURL=hoist-sheet.js.map