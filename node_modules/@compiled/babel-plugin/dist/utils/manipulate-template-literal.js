"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isQuasiMidStatement = exports.optimizeConditionalStatement = exports.recomposeTemplateLiteral = exports.hasNestedTemplateLiteralsWithConditionalRules = void 0;
const traverse_1 = __importDefault(require("@babel/traverse"));
const t = __importStar(require("@babel/types"));
const ast_1 = require("./ast");
const constants_1 = require("./constants");
const is_empty_1 = require("./is-empty");
/**
 * TODO: this is a temporary workaround so that we don't evaluate expressions that may throw an error.
 * It should be removed after addressing https://github.com/atlassian-labs/compiled/issues/1081
 *
 * Returns `true` if
 * - there is another conditional expression at the root of the current template literal
 *   with a conditional expression to evaluate OR
 * - there is a nested logical expression within the current template literal
 *
 * @param node
 * @param meta {Metadata} The current metadata to use to find the parent node
 */
const hasNestedTemplateLiteralsWithConditionalRules = (node, meta) => {
    const expressionPath = (0, ast_1.getPathOfNode)(node, meta.parentPath);
    const { parent } = expressionPath;
    let isNested = false;
    (0, traverse_1.default)(parent, {
        noScope: true,
        ConditionalExpression(path) {
            constants_1.CONDITIONAL_PATHS.map((c) => {
                const expression = path.node[c];
                if ((t.isTaggedTemplateExpression(expression) && expression.quasi === node) ||
                    (t.isTemplateLiteral(expression) &&
                        expression.expressions.some((expressionNode) => t.isArrowFunctionExpression(expressionNode))) ||
                    t.isLogicalExpression(expression)) {
                    isNested = true;
                    path.stop();
                }
            });
        },
    });
    return isNested;
};
exports.hasNestedTemplateLiteralsWithConditionalRules = hasNestedTemplateLiteralsWithConditionalRules;
const recomposeTemplateLiteral = (template, prefix, suffix = '') => {
    const { quasis } = template;
    const [leadQuasi] = quasis;
    const tailQuasi = quasis[quasis.length - 1];
    leadQuasi.value = {
        raw: `${prefix}${leadQuasi.value.raw}`,
        cooked: `${prefix}${leadQuasi.value.cooked}`,
    };
    tailQuasi.value = {
        raw: `${tailQuasi.value.raw}${suffix}`,
        cooked: `${tailQuasi.value.cooked}${suffix}`,
    };
};
exports.recomposeTemplateLiteral = recomposeTemplateLiteral;
/**
 * Tries to convert a conditional expression of values into `property: value`
 * to allow CSS classes to be built on each conditional branch
 * @param prefix {string}
 * @param suffix {string}
 * @param expression {t.ConditionalExpression}
 */
const optimizeConditionalExpression = (prefix, suffix, expression) => {
    const [styleProperty] = prefix.trim().split(':');
    const isValidCssProperty = styleProperty.trimEnd().match(/(-?[a-z]+)+$/);
    const isNotPartOfString = !prefix.endsWith("'") && !prefix.endsWith('"');
    // This will skip statements like
    // height: calc(100% - ${identifier} - ${conditionalExpression});
    // content: 'I contain code ${conditionalExpression});';
    // as the same technique can't applied to these scenarios
    // or their content is unpredictable
    if (isValidCssProperty && isNotPartOfString) {
        const branches = constants_1.CONDITIONAL_PATHS.map((path) => {
            const branchNode = expression[path];
            if (t.isNumericLiteral(branchNode) || t.isStringLiteral(branchNode)) {
                return t.stringLiteral(`${prefix}${branchNode.value}${suffix}`);
            }
            else if (t.isTemplateLiteral(branchNode)) {
                (0, exports.recomposeTemplateLiteral)(branchNode, prefix, suffix);
                return branchNode;
            }
            else if (t.isConditionalExpression(branchNode)) {
                return optimizeConditionalExpression(prefix, suffix, branchNode);
            }
            else {
                const isValueEmpty = (0, is_empty_1.isEmptyValue)(branchNode);
                return t.templateLiteral([
                    t.templateElement({ raw: prefix, cooked: prefix }),
                    t.templateElement({ raw: suffix, cooked: suffix }),
                ], [isValueEmpty ? t.stringLiteral('') : branchNode]);
            }
        });
        return t.conditionalExpression(expression.test, branches[0], branches[1]);
    }
    return expression;
};
/**
 * Tries to modify a CSS statement in a template literal containing conditional values to
 * output separate CSS classes for each value
 * @param quasi {t.TemplateElement}
 * @param nextQuasi {t.TemplateElement}
 * @param expression {t.ArrowFunctionExpression}
 */
const optimizeConditionalStatement = (quasi, nextQuasi, expression) => {
    var _a;
    const quasiValue = quasi.value.raw;
    // Breaks down quasi into individual statements
    const quasiStatements = quasiValue.split(/[;|{|}]/g);
    // Any string that is mid statement should be the last item
    // as it should be interupted by an expression
    const prefix = quasiStatements[quasiStatements.length - 1];
    const nextQuasiValue = (_a = nextQuasi === null || nextQuasi === void 0 ? void 0 : nextQuasi.value.raw) !== null && _a !== void 0 ? _a : '';
    const endOfStatementIndex = nextQuasiValue.indexOf(';');
    const nextQuasiEndsStatement = endOfStatementIndex !== -1;
    if (t.isConditionalExpression(expression.body) && prefix && nextQuasiEndsStatement) {
        const suffix = nextQuasiValue.substring(0, endOfStatementIndex);
        const optimizedConditional = optimizeConditionalExpression(prefix, suffix, expression.body);
        if (optimizedConditional !== expression.body) {
            const quasiValueWithoutPrefix = quasiValue.substring(0, quasiValue.lastIndexOf(prefix));
            expression.body = optimizedConditional;
            quasi.value = { raw: quasiValueWithoutPrefix, cooked: quasiValueWithoutPrefix };
            if (nextQuasi) {
                const quasiValueWithoutSuffix = nextQuasiValue.substring(endOfStatementIndex + 1);
                nextQuasi.value = { raw: quasiValueWithoutSuffix, cooked: quasiValueWithoutSuffix };
            }
        }
    }
};
exports.optimizeConditionalStatement = optimizeConditionalStatement;
/**
 * Checks if quasi ends in an incomplete statement
 * @param quasi {t.TemplateElement}
 */
const isQuasiMidStatement = (quasi) => {
    const { value: { raw }, } = quasi;
    // Remove any comments (/* ... */) then trim
    const stringValue = raw.replace(/\/\*(.|\n)*?\*\//g, '').trimEnd();
    return (Boolean(stringValue) &&
        !stringValue.endsWith(';') &&
        !stringValue.endsWith('{') &&
        !stringValue.endsWith('}'));
};
exports.isQuasiMidStatement = isQuasiMidStatement;
//# sourceMappingURL=manipulate-template-literal.js.map