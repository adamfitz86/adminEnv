import * as t from '@babel/types';
import type { Metadata } from '../types';
type ExpressionToString = (expression: t.Expression | t.PrivateName, meta: Metadata) => string;
type StringConcatExpression = t.Expression & {
    callee: t.MemberExpression & {
        computed: false;
        object: t.StringLiteral;
        property: t.Identifier & {
            name: 'concat';
        };
    };
    arguments: t.Expression[];
};
/**
 * Determines if we think we can deeply and statically concatenate the arguments of a `"text ".concat('â€¦')` call.
 *
 * For example, `"8px ".concat(' var(--ds-space-050)', ' var(--ds-space-100)')` might be output
 * by Babel and statically concatenated to `"8px var(--ds-space-050) var(--ds-space-100)"`.
 */
export declare const canBeStaticallyConcatenated: (expression: t.Expression) => expression is StringConcatExpression & boolean;
export declare const expressionToString: ExpressionToString;
/**
 * Returns string output of a ObjectProperty's key
 *
 * @param prop ObjectProperty expression
 * @param meta Metadata
 */
export declare const objectPropertyToString: (prop: t.ObjectProperty, meta: Metadata) => string;
export {};
