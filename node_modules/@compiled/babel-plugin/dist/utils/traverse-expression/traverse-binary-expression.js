"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.traverseBinaryExpression = void 0;
const t = __importStar(require("@babel/types"));
const create_result_pair_1 = require("../create-result-pair");
const has_numeric_value_1 = require("../has-numeric-value");
const traverseBinaryExpression = (expression, meta, evaluateExpression) => {
    if (!t.isPrivateName(expression.left)) {
        const { value: left } = evaluateExpression(expression.left, meta);
        const { value: right } = evaluateExpression(expression.right, meta);
        if ((0, has_numeric_value_1.hasNumericValue)(left) && (0, has_numeric_value_1.hasNumericValue)(right)) {
            return (0, create_result_pair_1.createResultPair)(t.binaryExpression(expression.operator, left, right), meta);
        }
    }
    return (0, create_result_pair_1.createResultPair)(expression, meta);
};
exports.traverseBinaryExpression = traverseBinaryExpression;
//# sourceMappingURL=traverse-binary-expression.js.map