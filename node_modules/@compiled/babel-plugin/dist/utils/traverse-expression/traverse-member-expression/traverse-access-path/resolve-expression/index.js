"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveExpressionInMember = void 0;
const t = __importStar(require("@babel/types"));
const create_result_pair_1 = require("../../../../create-result-pair");
const is_compiled_1 = require("../../../../is-compiled");
const function_args_1 = require("./function-args");
const identifier_1 = require("./identifier");
const resolveExpressionInMember = (expression, meta, expressionName, memberExpression, evaluateExpression) => {
    let result = (0, create_result_pair_1.createResultPair)(expression, meta);
    if (t.isIdentifier(expression)) {
        result = (0, identifier_1.evaluateIdentifier)(expression, meta, evaluateExpression);
    }
    else if (t.isFunction(expression)) {
        // Function expressions are the declaration and not the function call
        // itself, the arguments are stored in the member expression
        const callExpression = t.callExpression(expression, (0, function_args_1.getFunctionArgs)(expressionName, memberExpression));
        result = evaluateExpression(callExpression, meta);
    }
    else if ((0, is_compiled_1.isCompiledCSSCallExpression)(expression, meta.state) &&
        t.isExpression(expression.arguments[0])) {
        result = evaluateExpression(expression.arguments[0], meta);
    }
    else if (t.isCallExpression(expression) || t.isMemberExpression(expression)) {
        result = evaluateExpression(expression, meta);
    }
    // Recursively resolve expression until we extracted its value node or
    // have reach its origin declaration
    if (result.value !== expression) {
        return (0, exports.resolveExpressionInMember)(result.value, result.meta, expressionName, memberExpression, evaluateExpression);
    }
    return result;
};
exports.resolveExpressionInMember = resolveExpressionInMember;
//# sourceMappingURL=index.js.map