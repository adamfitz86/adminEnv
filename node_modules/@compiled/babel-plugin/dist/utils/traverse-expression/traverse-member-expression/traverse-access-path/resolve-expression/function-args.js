"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFunctionArgs = void 0;
const traverse_1 = __importDefault(require("@babel/traverse"));
const t = __importStar(require("@babel/types"));
/*
 * Finds a call expression within a member given the function name
 * TODO:FIX - This won't work if the member contains more than
 * one of the same function name i.e. `obj.getValue().getValue()`
 */
const getFunctionArgs = (functionName, memberExpression) => {
    const identifierOpts = { name: functionName };
    let args = [];
    (0, traverse_1.default)(memberExpression, {
        noScope: true,
        CallExpression(path) {
            const { node } = path;
            const { callee } = node;
            const found = t.isIdentifier(callee, identifierOpts) ||
                (t.isMemberExpression(callee) && t.isIdentifier(callee.property, identifierOpts));
            if (found) {
                args = node.arguments;
                path.stop();
            }
        },
    });
    return args;
};
exports.getFunctionArgs = getFunctionArgs;
//# sourceMappingURL=function-args.js.map