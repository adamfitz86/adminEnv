"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.evaluateNamespaceImportPath = void 0;
const t = __importStar(require("@babel/types"));
const create_result_pair_1 = require("../../../../create-result-pair");
const traversers_1 = require("../../../../traversers");
const evaluateNamespaceImportPath = (expression, file, meta, exportName) => {
    const result = exportName === 'default' ? (0, traversers_1.getDefaultExport)(file) : (0, traversers_1.getNamedExport)(file, exportName);
    if (result) {
        const { node, path } = result;
        const updatedMeta = Object.assign(Object.assign({}, meta), { parentPath: path, ownPath: meta.parentPath });
        const { parentPath } = updatedMeta;
        if (exportName === 'default' && !parentPath.scope.getOwnBinding('default')) {
            parentPath.scope.push({
                id: t.identifier('default'),
                init: node,
                kind: 'const',
            });
        }
        return (0, create_result_pair_1.createResultPair)(node, updatedMeta);
    }
    return (0, create_result_pair_1.createResultPair)(expression, meta);
};
exports.evaluateNamespaceImportPath = evaluateNamespaceImportPath;
//# sourceMappingURL=namespace-import.js.map