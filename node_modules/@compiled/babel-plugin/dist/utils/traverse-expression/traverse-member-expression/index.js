"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.traverseMemberExpression = void 0;
const traverse_1 = __importDefault(require("@babel/traverse"));
const t = __importStar(require("@babel/types"));
const create_result_pair_1 = require("../../create-result-pair");
const traverse_access_path_1 = require("./traverse-access-path");
/**
 * Returns the binding identifier for a member expression.
 *
 * For example:
 * 1. Member expression `foo.bar.baz` will return the `foo` identifier along
 * with `originalBindingType` as 'Identifier'.
 * 2. Member expression with function call `foo().bar.baz` will return the
 * `foo` identifier along with `originalBindingType` as 'CallExpression'.
 * 3. We also want to process call expressions with a member expression callee
 * i.e. `foo.bar.baz()`
 * @param expression - Member expression node.
 */
const getMemberExpressionMeta = (expression) => {
    const accessPath = [];
    let bindingIdentifier = null;
    let originalBindingType = 'Identifier';
    (0, traverse_1.default)(t.expressionStatement(expression), {
        noScope: true,
        MemberExpression(path) {
            // Skip if member comes from call expression arguments
            if (path.listKey === 'arguments') {
                return;
            }
            if (t.isIdentifier(path.node.object)) {
                bindingIdentifier = path.node.object;
                originalBindingType = bindingIdentifier.type;
            }
            else if (t.isCallExpression(path.node.object)) {
                if (t.isIdentifier(path.node.object.callee)) {
                    bindingIdentifier = path.node.object.callee;
                    originalBindingType = path.node.object.type;
                }
            }
            if (t.isIdentifier(path.node.property)) {
                accessPath.push(path.node.property);
            }
            else if (
            // Adds the function name of the trailing call expression
            t.isCallExpression(path.node.property) &&
                t.isIdentifier(path.node.property.callee)) {
                accessPath.push(path.node.property.callee);
            }
        },
    });
    return {
        accessPath: accessPath.reverse(),
        bindingIdentifier,
        originalBindingType,
    };
};
/**
 * Will look in an expression and return the actual value along with updated metadata.
 *
 * E.g: If there is a member expression called `colors.primary` that has identifier `color` which
 * is set somewhere as `const colors = { primary: 'blue' }`,
 * passing the `colors` identifier to this function would return `'blue'`.
 *
 * @param expression Expression we want to interrogate.
 * @param meta {Metadata} Useful metadata that can be used during the transformation
 */
const traverseMemberExpression = (expression, meta, evaluateExpression) => {
    const { accessPath, bindingIdentifier } = getMemberExpressionMeta(expression);
    if (bindingIdentifier) {
        return (0, traverse_access_path_1.traverseMemberAccessPath)(t.identifier(bindingIdentifier.name), meta, bindingIdentifier.name, accessPath, expression, evaluateExpression);
    }
    return (0, create_result_pair_1.createResultPair)(expression, meta);
};
exports.traverseMemberExpression = traverseMemberExpression;
//# sourceMappingURL=index.js.map