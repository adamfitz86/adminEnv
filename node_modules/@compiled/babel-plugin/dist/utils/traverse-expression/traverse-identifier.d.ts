import type * as t from '@babel/types';
import type { Metadata } from '../../types';
import { createResultPair } from '../create-result-pair';
import type { EvaluateExpression } from '../types';
/**
 * Will look in an expression and return the actual value along with updated metadata.
 *
 * E.g: If there is an identifier called `color` that is set somewhere as `const color = 'blue'`,
 * passing the `color` identifier to this function would return `'blue'`.
 *
 * @param expression Expression we want to interrogate.
 * @param meta {Metadata} Useful metadata that can be used during the transformation
 */
export declare const traverseIdentifier: (expression: t.Identifier, meta: Metadata, evaluateExpression: EvaluateExpression) => ReturnType<typeof createResultPair>;
