"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.appendRuntimeImports = void 0;
const t = __importStar(require("@babel/types"));
/**
 * Wrapper to make defining import specifiers easier.
 * If `localName` is defined it will rename the import to it,
 * e.g: `name as localName`.
 *
 * @param name import name
 * @param localName local name
 */
const importSpecifier = (name, localName) => {
    return t.importSpecifier(t.identifier(name), t.identifier(localName || name));
};
// Runtime function `ac` is less performant than `ax`, so we only want to import `ac` if classNameCompressionMap is provided.
const COMPILED_RUNTIME_IMPORTS_WITH_COMPRESSION = ['ac', 'ix', 'CC', 'CS'];
const COMPILED_RUNTIME_IMPORTS_WITHOUT_COMPRESSION = ['ax', 'ix', 'CC', 'CS'];
const COMPILED_RUNTIME_MODULE = '@compiled/react/runtime';
/**
 * Appends runtime import to code. If it is already present, it will append import specifiers
 * to already imported declaration path else it will create fresh import declaration path
 * with runtime import specifiers.
 *
 * @param path ImportDeclaration node path
 */
const appendRuntimeImports = (path, state) => {
    const COMPILED_RUNTIME_IMPORTS = state.opts.classNameCompressionMap
        ? COMPILED_RUNTIME_IMPORTS_WITH_COMPRESSION
        : COMPILED_RUNTIME_IMPORTS_WITHOUT_COMPRESSION;
    // Check if we have any sibling runtime import
    const previouslyDeclaredRuntimeDeclaration = path
        .get('body')
        .find((childPath) => {
        return (t.isImportDeclaration(childPath.node) &&
            childPath.node.source.value === COMPILED_RUNTIME_MODULE);
    });
    if (previouslyDeclaredRuntimeDeclaration) {
        /**
         * Get local import name instead of imported name to handle scenario when
         * import specifier is imported as named and normal both.
         *
         * eg. import { CC as CompiledRoot, ax, CC, CS } from '@compiled/react/runtime';
         * In above example `CC` is used both as `CompiledRoot` and `CC`.
         */
        const localImportNames = previouslyDeclaredRuntimeDeclaration
            .get('specifiers')
            .map((specifier) => specifier.node.local.name);
        COMPILED_RUNTIME_IMPORTS.forEach((runtimeImportName) => {
            // Avoids duplicate imports from being appended if already present
            if (!localImportNames.includes(runtimeImportName)) {
                previouslyDeclaredRuntimeDeclaration.pushContainer('specifiers', importSpecifier(runtimeImportName));
            }
        });
    }
    else {
        // Add the runtime entrypoint module
        path.unshiftContainer('body', t.importDeclaration(COMPILED_RUNTIME_IMPORTS.map((runtimeImportName) => importSpecifier(runtimeImportName)), t.stringLiteral(COMPILED_RUNTIME_MODULE)));
    }
};
exports.appendRuntimeImports = appendRuntimeImports;
//# sourceMappingURL=append-runtime-imports.js.map