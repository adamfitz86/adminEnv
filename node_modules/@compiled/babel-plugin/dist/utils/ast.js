"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pickFunctionBody = exports.wrapNodeInIIFE = exports.buildCodeFrameError = exports.getPathOfNode = void 0;
const traverse_1 = __importDefault(require("@babel/traverse"));
const t = __importStar(require("@babel/types"));
/**
 * Returns the nodes path including the scope of a parent.
 * @param node
 * @param parentPath
 */
const getPathOfNode = (node, parentPath) => {
    let foundPath = null;
    if (t.isExpression(node)) {
        node = t.expressionStatement(node);
    }
    (0, traverse_1.default)(node, {
        enter(path) {
            foundPath = path;
            path.stop();
        },
    }, parentPath.scope, undefined, parentPath);
    if (!foundPath) {
        throw parentPath.buildCodeFrameError('No path for a child node was found.');
    }
    return foundPath;
};
exports.getPathOfNode = getPathOfNode;
/**
 * Builds a code frame error from a passed in node.
 *
 * @param error
 * @param node
 * @param parentPath
 */
const buildCodeFrameError = (error, node, parentPath) => {
    if (!node) {
        throw parentPath.buildCodeFrameError(error);
    }
    const startLoc = node.loc ? ` (${node.loc.start.line}:${node.loc.start.column})` : '';
    return (0, exports.getPathOfNode)(node, parentPath).buildCodeFrameError(`${error}${startLoc}.`);
};
exports.buildCodeFrameError = buildCodeFrameError;
/**
 * Will wrap BlockStatement or Expression in an IIFE,
 * Looks like (() => { return 10; })().
 *
 * @param node Node of type either BlockStatement or Expression
 */
const wrapNodeInIIFE = (node) => t.callExpression(t.arrowFunctionExpression([], node), []);
exports.wrapNodeInIIFE = wrapNodeInIIFE;
const tryWrappingBlockStatementInIIFE = (node) => t.isBlockStatement(node) ? (0, exports.wrapNodeInIIFE)(node) : node;
/**
 * Will pick `Function` body and tries to wrap it in an IIFE if
 * its a BlockStatement otherwise returns the picked body,
 * E.g.
 * `props => props.color` would end up as `props.color`.
 * `props => { return props.color; }` would end up as `(() => { return props.color })()`
 * `function () { return props.color; }` would end up as `(function () { return props.color })()`
 *
 * @param node Node of type ArrowFunctionExpression
 */
const pickFunctionBody = (node) => tryWrappingBlockStatementInIIFE(node.body);
exports.pickFunctionBody = pickFunctionBody;
//# sourceMappingURL=ast.js.map