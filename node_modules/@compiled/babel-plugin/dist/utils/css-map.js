"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createErrorMessage = exports.ErrorMessages = exports.errorIfNotValidObjectProperty = exports.hasExtendedSelectorsKey = exports.isPlainSelector = exports.isAtRuleObject = exports.getKeyValue = exports.objectKeyIsLiteralValue = exports.EXTENDED_SELECTORS_KEY = void 0;
const t = __importStar(require("@babel/types"));
const ast_1 = require("../utils/ast");
exports.EXTENDED_SELECTORS_KEY = 'selectors';
const atRules = {
    '@charset': true,
    '@counter-style': true,
    '@document': true,
    '@font-face': true,
    '@font-feature-values': true,
    '@font-palette-values': true,
    '@import': true,
    '@keyframes': true,
    '@layer': true,
    '@media': true,
    '@namespace': true,
    '@page': true,
    '@property': true,
    '@scope': true,
    '@scroll-timeline': true,
    '@starting-style': true,
    '@supports': true,
    '@viewport': true,
};
const objectKeyIsLiteralValue = (key) => t.isIdentifier(key) || t.isStringLiteral(key);
exports.objectKeyIsLiteralValue = objectKeyIsLiteralValue;
const getKeyValue = (key) => {
    if (t.isIdentifier(key))
        return key.name;
    else if (t.isStringLiteral(key))
        return key.value;
    throw new Error(`Expected an identifier or a string literal, got type ${key.type}`);
};
exports.getKeyValue = getKeyValue;
const isAtRuleObject = (key) => {
    const keyValue = (0, exports.getKeyValue)(key);
    return keyValue in atRules;
};
exports.isAtRuleObject = isAtRuleObject;
const isPlainSelector = (selector) => selector.startsWith(':');
exports.isPlainSelector = isPlainSelector;
const hasExtendedSelectorsKey = (property) => (0, exports.objectKeyIsLiteralValue)(property.key) && (0, exports.getKeyValue)(property.key) === exports.EXTENDED_SELECTORS_KEY;
exports.hasExtendedSelectorsKey = hasExtendedSelectorsKey;
function errorIfNotValidObjectProperty(property, meta) {
    if (t.isObjectMethod(property)) {
        throw (0, ast_1.buildCodeFrameError)((0, exports.createErrorMessage)(ErrorMessages.NO_OBJECT_METHOD), property.key, meta.parentPath);
    }
    else if (t.isSpreadElement(property)) {
        throw (0, ast_1.buildCodeFrameError)((0, exports.createErrorMessage)(ErrorMessages.NO_SPREAD_ELEMENT), property.argument, meta.parentPath);
    }
}
exports.errorIfNotValidObjectProperty = errorIfNotValidObjectProperty;
// The messages are exported for testing.
var ErrorMessages;
(function (ErrorMessages) {
    ErrorMessages["NO_TAGGED_TEMPLATE"] = "cssMap function cannot be used as a tagged template expression.";
    ErrorMessages["NUMBER_OF_ARGUMENT"] = "cssMap function can only receive one argument.";
    ErrorMessages["ARGUMENT_TYPE"] = "cssMap function can only receive an object.";
    ErrorMessages["AT_RULE_VALUE_TYPE"] = "Value of at-rule block must be an object.";
    ErrorMessages["SELECTORS_BLOCK_VALUE_TYPE"] = "Value of `selectors` key must be an object.";
    ErrorMessages["DEFINE_MAP"] = "CSS Map must be declared at the top-most scope of the module.";
    ErrorMessages["NO_SPREAD_ELEMENT"] = "Spread element is not supported in CSS Map.";
    ErrorMessages["NO_OBJECT_METHOD"] = "Object method is not supported in CSS Map.";
    ErrorMessages["STATIC_VARIANT_OBJECT"] = "The variant object must be statically defined.";
    ErrorMessages["DUPLICATE_AT_RULE"] = "Cannot declare an at-rule more than once in CSS Map.";
    ErrorMessages["DUPLICATE_SELECTOR"] = "Cannot declare a selector more than once in CSS Map.";
    ErrorMessages["DUPLICATE_SELECTORS_BLOCK"] = "Duplicate `selectors` key found in cssMap; expected either zero `selectors` keys or one.";
    ErrorMessages["STATIC_PROPERTY_KEY"] = "Property key may only be a static string.";
    ErrorMessages["SELECTOR_BLOCK_WRONG_PLACE"] = "`selector` key was defined in the wrong place.";
    ErrorMessages["USE_SELECTORS_WITH_AMPERSAND"] = "This selector is applied to the parent element, and so you need to specify the ampersand symbol (&) directly before it. For example, `:hover` should be written as `&:hover`.";
    ErrorMessages["USE_VARIANT_OF_CSS_MAP"] = "You must use the variant of a CSS Map object (eg. `styles.root`), not the root object itself, eg. `styles`.";
})(ErrorMessages = exports.ErrorMessages || (exports.ErrorMessages = {}));
const createErrorMessage = (message) => {
    return `
${message}

Check out our documentation for cssMap examples: https://compiledcssinjs.com/docs/api-cssmap
`;
};
exports.createErrorMessage = createErrorMessage;
//# sourceMappingURL=css-map.js.map