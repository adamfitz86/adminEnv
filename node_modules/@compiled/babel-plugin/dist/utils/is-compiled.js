"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isCompiledStyledTaggedTemplateExpression = exports.isCompiledStyledCallExpression = exports.isCompiledKeyframesTaggedTemplateExpression = exports.isCompiledCSSMapCallExpression = exports.isCompiledKeyframesCallExpression = exports.isCompiledCSSTaggedTemplateExpression = exports.isCompiledCSSCallExpression = void 0;
const t = __importStar(require("@babel/types"));
/**
 * Returns `true` if the node is using `css` from `@compiled/react` as a call expression
 *
 * @param node {t.Expression} The expression node that is being checked
 * @param state {State} Plugin state
 * @returns {boolean} Whether the node is a css usage from compiled
 */
const isCompiledCSSCallExpression = (node, state) => {
    var _a, _b;
    return t.isCallExpression(node) &&
        t.isIdentifier(node.callee) &&
        [...(((_a = state.compiledImports) === null || _a === void 0 ? void 0 : _a.css) || []), (_b = state.importedCompiledImports) === null || _b === void 0 ? void 0 : _b.css].includes(node.callee.name);
};
exports.isCompiledCSSCallExpression = isCompiledCSSCallExpression;
/**
 * Returns `true` if the node is using `css` from `@compiled/react` as a tagged template expression
 *
 * @param node {t.Expression} The expression node that is being checked
 * @param state {State} Plugin state
 * @returns {boolean} Whether the node is a css usage from compiled
 */
const isCompiledCSSTaggedTemplateExpression = (node, state) => {
    var _a, _b;
    return t.isTaggedTemplateExpression(node) &&
        t.isIdentifier(node.tag) &&
        !!((_b = (_a = state.compiledImports) === null || _a === void 0 ? void 0 : _a.css) === null || _b === void 0 ? void 0 : _b.includes(node.tag.name));
};
exports.isCompiledCSSTaggedTemplateExpression = isCompiledCSSTaggedTemplateExpression;
/**
 * Returns `true` if the node is using `keyframes` from `@compiled/react` as a call expression
 *
 * @param node {t.Node} The node that is being checked
 * @param state {State} Plugin state
 * @returns {boolean} Whether the node is a compiled keyframe
 */
const isCompiledKeyframesCallExpression = (node, state) => {
    var _a, _b;
    return t.isCallExpression(node) &&
        t.isIdentifier(node.callee) &&
        !!((_b = (_a = state.compiledImports) === null || _a === void 0 ? void 0 : _a.keyframes) === null || _b === void 0 ? void 0 : _b.includes(node.callee.name));
};
exports.isCompiledKeyframesCallExpression = isCompiledKeyframesCallExpression;
/**
 * Returns `true` if the node is using `cssMap` from `@compiled/react` as a call expression
 *
 * @param node {t.Node} The node that is being checked
 * @param state {State} Plugin state
 * @returns {boolean} Whether the node is a compiled cssMap
 */
const isCompiledCSSMapCallExpression = (node, state) => {
    var _a, _b;
    return t.isCallExpression(node) &&
        t.isIdentifier(node.callee) &&
        !!((_b = (_a = state.compiledImports) === null || _a === void 0 ? void 0 : _a.cssMap) === null || _b === void 0 ? void 0 : _b.includes(node.callee.name));
};
exports.isCompiledCSSMapCallExpression = isCompiledCSSMapCallExpression;
/**
 * Returns `true` if the node is using `keyframes` from `@compiled/react` as a tagged template expression
 *
 * @param node {t.Node} The node that is being checked
 * @param state {State} Plugin state
 * @returns {boolean} Whether the node is a compiled keyframe
 */
const isCompiledKeyframesTaggedTemplateExpression = (node, state) => {
    var _a, _b;
    return t.isTaggedTemplateExpression(node) &&
        t.isIdentifier(node.tag) &&
        !!((_b = (_a = state.compiledImports) === null || _a === void 0 ? void 0 : _a.keyframes) === null || _b === void 0 ? void 0 : _b.includes(node.tag.name));
};
exports.isCompiledKeyframesTaggedTemplateExpression = isCompiledKeyframesTaggedTemplateExpression;
/**
 * Returns `true` if the node is using `styled` from `@compiled/react` from a styled.tag usage
 *
 * @param node {t.Node} The node that is being checked
 * @param state {State} Plugin state
 * @returns {boolean} Whether the node is a styled usage from compiled
 */
const isCompiledStyledMemberExpression = (node, state) => {
    var _a, _b;
    return t.isMemberExpression(node) &&
        t.isIdentifier(node.object) &&
        !!((_b = (_a = state.compiledImports) === null || _a === void 0 ? void 0 : _a.styled) === null || _b === void 0 ? void 0 : _b.includes(node.object.name));
};
/**
 * Returns `true` if the node is using `styled` from `@compiled/react` from a styled(Component) usage
 *
 * @param node {t.Node} The node that is being checked
 * @param state {State} Plugin state
 * @returns {boolean} Whether the node is a styled usage from compiled
 */
const isCompiledStyledCompositionCallExpression = (node, state) => {
    var _a, _b;
    return t.isCallExpression(node) &&
        t.isIdentifier(node.callee) &&
        !!((_b = (_a = state.compiledImports) === null || _a === void 0 ? void 0 : _a.styled) === null || _b === void 0 ? void 0 : _b.includes(node.callee.name));
};
/**
 * Returns `true` if the node is using `styled` from `@compiled/react` as a call expression
 *
 * @param node {t.Expression} The expression node that is being checked
 * @param state {State} Plugin state
 * @returns {boolean} Whether the node is a styled usage from compiled
 */
const isCompiledStyledCallExpression = (node, state) => t.isCallExpression(node) &&
    (isCompiledStyledMemberExpression(node.callee, state) ||
        isCompiledStyledCompositionCallExpression(node.callee, state));
exports.isCompiledStyledCallExpression = isCompiledStyledCallExpression;
/**
 * Returns `true` if the node is using `styled` from `@compiled/react` as a tagged template expression
 *
 * @param node {t.Node} The node that is being checked
 * @param state {State} Plugin state
 * @returns {boolean} Whether the node is a styled usage from compiled
 */
const isCompiledStyledTaggedTemplateExpression = (node, state) => t.isTaggedTemplateExpression(node) &&
    (isCompiledStyledMemberExpression(node.tag, state) ||
        isCompiledStyledCompositionCallExpression(node.tag, state));
exports.isCompiledStyledTaggedTemplateExpression = isCompiledStyledTaggedTemplateExpression;
//# sourceMappingURL=is-compiled.js.map