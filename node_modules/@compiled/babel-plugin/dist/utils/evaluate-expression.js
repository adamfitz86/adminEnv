"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.evaluateExpression = void 0;
const t = __importStar(require("@babel/types"));
const ast_1 = require("./ast");
const create_result_pair_1 = require("./create-result-pair");
const is_compiled_1 = require("./is-compiled");
const traverse_expression_1 = require("./traverse-expression");
/**
 * Returns `true` if an identifier or any paths that reference the identifier are mutated.
 * @param path
 */
const isIdentifierReferencesMutated = (path) => {
    const binding = path.scope.getBinding(path.node.name);
    if (!binding) {
        return false;
    }
    if (!t.isVariableDeclarator(binding.path.node) || !binding.constant) {
        return true;
    }
    for (let i = 0; i < binding.referencePaths.length; i++) {
        const refPath = binding.referencePaths[i];
        const innerBinding = refPath.scope.getBinding(path.node.name);
        if (!innerBinding) {
            continue;
        }
        if (!t.isVariableDeclarator(innerBinding.path.node) || !innerBinding.constant) {
            return true;
        }
    }
    return false;
};
/**
 * Will traverse a path and its identifiers to find all bindings.
 * If any of those bindings are mutated `true` will be returned.
 *
 * @param path
 */
const isPathReferencingAnyMutatedIdentifiers = (path) => {
    if (path.isIdentifier()) {
        return isIdentifierReferencesMutated(path);
    }
    let mutated = false;
    path.traverse({
        Identifier(innerPath) {
            const result = isIdentifierReferencesMutated(path);
            if (result) {
                mutated = true;
                // No need to keep traversing - let's stop!
                innerPath.stop();
            }
        },
    });
    return mutated;
};
/**
 * Will try to statically evaluate the node.
 * If successful it will return a literal node,
 * else it will return the fallback node.
 *
 * @param node Node to evaluate
 * @param meta {Metadata} Useful metadata that can be used during the transformation
 * @param fallbackNode Optional node to return if evaluation is not successful. Defaults to `node`.
 */
const babelEvaluateExpression = (node, meta, fallbackNode = node) => {
    try {
        const path = (0, ast_1.getPathOfNode)(node, meta.parentPath);
        if (isPathReferencingAnyMutatedIdentifiers(path)) {
            return fallbackNode;
        }
        const result = path.evaluate();
        if (result.value != null) {
            switch (typeof result.value) {
                case 'string':
                    return t.stringLiteral(result.value);
                case 'number':
                    return t.numericLiteral(result.value);
            }
        }
        return fallbackNode;
    }
    catch (_a) {
        return fallbackNode;
    }
};
/**
 * Will look in an expression and return the actual value along with updated metadata.
 * If the expression is an identifier node (a variable) and a constant,
 * it will return the variable reference.
 *
 * E.g: If there was a identifier called `color` that is set somewhere as `const color = 'blue'`,
 * passing the `color` identifier to this function would return `'blue'`.
 *
 * This behaviour is the same for const string & numeric literals,
 * and object expressions.
 *
 * @param expression Expression we want to interrogate.
 * @param meta {Metadata} Useful metadata that can be used during the transformation
 */
const evaluateExpression = (expression, meta) => {
    let value = undefined;
    let updatedMeta = meta;
    // TypeScript AST nodes can be skipped as we don't care about types
    const targetExpression = t.isTSAsExpression(expression) ? expression.expression : expression;
    // --------------
    // NOTE: We are recursively calling evaluateExpression() which is then going to try and evaluate it
    // multiple times. This may or may not be a performance problem - when looking for quick wins perhaps
    // there is something we could do better here.
    // --------------
    if (t.isIdentifier(targetExpression)) {
        ({ value, meta: updatedMeta } = (0, traverse_expression_1.traverseIdentifier)(targetExpression, updatedMeta, exports.evaluateExpression));
    }
    else if (t.isMemberExpression(targetExpression)) {
        ({ value, meta: updatedMeta } = (0, traverse_expression_1.traverseMemberExpression)(targetExpression, updatedMeta, exports.evaluateExpression));
    }
    else if (t.isFunction(targetExpression)) {
        ({ value, meta: updatedMeta } = (0, traverse_expression_1.traverseFunction)(targetExpression, updatedMeta, exports.evaluateExpression));
    }
    else if (t.isCallExpression(targetExpression)) {
        ({ value, meta: updatedMeta } = (0, traverse_expression_1.traverseCallExpression)(targetExpression, updatedMeta, exports.evaluateExpression));
    }
    else if (t.isBinaryExpression(targetExpression)) {
        ({ value, meta: updatedMeta } = (0, traverse_expression_1.traverseBinaryExpression)(targetExpression, updatedMeta, exports.evaluateExpression));
    }
    else if (t.isUnaryExpression(targetExpression)) {
        ({ value, meta: updatedMeta } = (0, traverse_expression_1.traverseUnaryExpression)(targetExpression, updatedMeta, exports.evaluateExpression));
    }
    if (t.isStringLiteral(value) ||
        t.isNumericLiteral(value) ||
        t.isObjectExpression(value) ||
        t.isTaggedTemplateExpression(value) ||
        // TODO this should be more generic
        (value && (0, is_compiled_1.isCompiledKeyframesCallExpression)(value, updatedMeta.state))) {
        return (0, create_result_pair_1.createResultPair)(value, updatedMeta);
    }
    if (value) {
        // If we fail to statically evaluate `value` we will return `expression` instead.
        // It's preferable to use the identifier than its result if it can't be statically evaluated.
        // E.g. say we got the result of an identifier `foo` as `bar()` -- its more preferable to return
        // `foo` instead of `bar()` for a single source of truth.
        const babelEvaluatedNode = babelEvaluateExpression(value, updatedMeta, targetExpression);
        return (0, create_result_pair_1.createResultPair)(babelEvaluatedNode, updatedMeta);
    }
    const babelEvaluatedNode = babelEvaluateExpression(targetExpression, updatedMeta);
    return (0, create_result_pair_1.createResultPair)(babelEvaluatedNode, updatedMeta);
};
exports.evaluateExpression = evaluateExpression;
//# sourceMappingURL=evaluate-expression.js.map