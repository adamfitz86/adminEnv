"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.applySelectors = exports.transformCssItems = void 0;
const t = __importStar(require("@babel/types"));
const css_1 = require("@compiled/css");
const compress_class_names_for_runtime_1 = require("./compress-class-names-for-runtime");
const css_builders_1 = require("./css-builders");
/**
 * Splits a single item's styles into sheets and an expression that handles
 * className logic at runtime.
 *
 * @param item {CssItem}
 * @param meta {Metadata} Useful metadata that can be used during the transformation
 */
const transformCssItem = (item, meta) => {
    switch (item.type) {
        case 'conditional':
            const consequent = transformCssItem(item.consequent, meta);
            const alternate = transformCssItem(item.alternate, meta);
            const defaultExpression = t.identifier('undefined');
            const hasConsequentSheets = Boolean(consequent.sheets.length);
            const hasAlternateSheets = Boolean(alternate.sheets.length);
            if (!hasConsequentSheets && !hasAlternateSheets) {
                return { sheets: [], classExpression: undefined };
            }
            if (!hasConsequentSheets || !hasAlternateSheets) {
                const classExpression = hasConsequentSheets
                    ? consequent.classExpression
                    : alternate.classExpression;
                return {
                    sheets: hasConsequentSheets ? consequent.sheets : alternate.sheets,
                    classExpression: t.logicalExpression('&&', hasConsequentSheets ? item.test : t.unaryExpression('!', item.test), classExpression || defaultExpression),
                };
            }
            return {
                sheets: [...consequent.sheets, ...alternate.sheets],
                classExpression: t.conditionalExpression(item.test, consequent.classExpression || defaultExpression, alternate.classExpression || defaultExpression),
            };
        case 'logical':
            const logicalCss = (0, css_1.transformCss)((0, css_builders_1.getItemCss)(item), meta.state.opts);
            return {
                sheets: logicalCss.sheets,
                classExpression: t.logicalExpression(item.operator, item.expression, t.stringLiteral((0, compress_class_names_for_runtime_1.compressClassNamesForRuntime)(logicalCss.classNames, meta.state.opts.classNameCompressionMap).join(' '))),
            };
        case 'map':
            return {
                sheets: meta.state.cssMap[item.name],
                classExpression: item.expression,
            };
        default:
            const css = (0, css_1.transformCss)((0, css_builders_1.getItemCss)(item), meta.state.opts);
            const className = (0, compress_class_names_for_runtime_1.compressClassNamesForRuntime)(css.classNames, meta.state.opts.classNameCompressionMap).join(' ');
            return {
                sheets: css.sheets,
                classExpression: className.trim() ? t.stringLiteral(className) : undefined,
            };
    }
};
/**
 * Transforms CSS output into `sheets` and a list of expressions for determining
 * the classNames for a component at runtime.
 *
 * @param cssItems {CssItem[]}
 */
const transformCssItems = (cssItems, meta) => {
    const sheets = [];
    const classNames = [];
    cssItems.forEach((item) => {
        const result = transformCssItem(item, meta);
        sheets.push(...result.sheets);
        if (result.classExpression) {
            classNames.push(result.classExpression);
        }
    });
    return { sheets, classNames };
};
exports.transformCssItems = transformCssItems;
/**
 * Wraps CSS within a CssItem around selector closures. Each subsequent selector
 * in the selectors array represents a nested selector.
 *
 * @param item {CssItem}
 * @param selectors {string[]}
 */
const applySelectors = (item, selectors) => {
    if (item.type === 'conditional') {
        (0, exports.applySelectors)(item.consequent, selectors);
        (0, exports.applySelectors)(item.alternate, selectors);
    }
    else {
        item.css = `${selectors.join('')}${item.css}${''.padEnd(selectors.length, '}')}`;
    }
};
exports.applySelectors = applySelectors;
//# sourceMappingURL=transform-css-items.js.map