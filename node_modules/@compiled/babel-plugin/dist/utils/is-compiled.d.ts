import * as t from '@babel/types';
import type { State } from '../types';
/**
 * Returns `true` if the node is using `css` from `@compiled/react` as a call expression
 *
 * @param node {t.Expression} The expression node that is being checked
 * @param state {State} Plugin state
 * @returns {boolean} Whether the node is a css usage from compiled
 */
export declare const isCompiledCSSCallExpression: (node: t.Expression, state: State) => node is t.CallExpression;
/**
 * Returns `true` if the node is using `css` from `@compiled/react` as a tagged template expression
 *
 * @param node {t.Expression} The expression node that is being checked
 * @param state {State} Plugin state
 * @returns {boolean} Whether the node is a css usage from compiled
 */
export declare const isCompiledCSSTaggedTemplateExpression: (node: t.Expression, state: State) => node is t.TaggedTemplateExpression;
/**
 * Returns `true` if the node is using `keyframes` from `@compiled/react` as a call expression
 *
 * @param node {t.Node} The node that is being checked
 * @param state {State} Plugin state
 * @returns {boolean} Whether the node is a compiled keyframe
 */
export declare const isCompiledKeyframesCallExpression: (node: t.Node, state: State) => node is t.CallExpression;
/**
 * Returns `true` if the node is using `cssMap` from `@compiled/react` as a call expression
 *
 * @param node {t.Node} The node that is being checked
 * @param state {State} Plugin state
 * @returns {boolean} Whether the node is a compiled cssMap
 */
export declare const isCompiledCSSMapCallExpression: (node: t.Node, state: State) => node is t.CallExpression;
/**
 * Returns `true` if the node is using `keyframes` from `@compiled/react` as a tagged template expression
 *
 * @param node {t.Node} The node that is being checked
 * @param state {State} Plugin state
 * @returns {boolean} Whether the node is a compiled keyframe
 */
export declare const isCompiledKeyframesTaggedTemplateExpression: (node: t.Node, state: State) => node is t.TaggedTemplateExpression;
/**
 * Returns `true` if the node is using `styled` from `@compiled/react` as a call expression
 *
 * @param node {t.Expression} The expression node that is being checked
 * @param state {State} Plugin state
 * @returns {boolean} Whether the node is a styled usage from compiled
 */
export declare const isCompiledStyledCallExpression: (node: t.Expression, state: State) => node is t.CallExpression;
/**
 * Returns `true` if the node is using `styled` from `@compiled/react` as a tagged template expression
 *
 * @param node {t.Node} The node that is being checked
 * @param state {State} Plugin state
 * @returns {boolean} Whether the node is a styled usage from compiled
 */
export declare const isCompiledStyledTaggedTemplateExpression: (node: t.Node, state: State) => node is t.TaggedTemplateExpression;
