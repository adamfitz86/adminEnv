"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildCssVariables = void 0;
const t = __importStar(require("@babel/types"));
const utils_1 = require("@compiled/utils");
/**
 * Will build up the CSS variables prop to be placed as inline styles.
 *
 * @param variables CSS variables that will be placed in the AST
 * @param transform Transform function that can be used to change the CSS variable expression
 */
const buildCssVariables = (variables, transform = (expression) => expression) => {
    return (0, utils_1.unique)(
    // Make sure all defined CSS variables are unique
    variables, 
    // We consider their uniqueness based on their name
    (variable) => variable.name).map((variable) => {
        // Map them into object properties.
        return t.objectProperty(t.stringLiteral(variable.name), t.callExpression(t.identifier('ix'), [
            // Allow callers to transform the expression if needed,
            // for example the styled API strips away the arrow function.
            transform(variable.expression),
            (variable.suffix && t.stringLiteral(variable.suffix)),
            (variable.suffix && variable.prefix && t.stringLiteral(variable.prefix)),
        ].filter(Boolean)));
    });
};
exports.buildCssVariables = buildCssVariables;
//# sourceMappingURL=build-css-variables.js.map