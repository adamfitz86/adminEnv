"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNamedExport = exports.getDefaultExport = void 0;
const traverse_1 = __importDefault(require("@babel/traverse"));
const t = __importStar(require("@babel/types"));
/**
 * Find the default export of a file and return the export's node and path.
 *
 * E.g: `export default 'blue';`
 * Will return the string literal node for 'blue'.
 *
 * E.g: `export default color;`
 * Will return the identifier node for `color`.
 *
 * @param ast File we want to traverse.
 */
const getDefaultExport = (ast) => {
    let result;
    (0, traverse_1.default)(ast, {
        ExportDefaultDeclaration(path) {
            result = { path, node: path.node.declaration };
            path.stop();
        },
        // Handle `export {alias as default}`
        ExportNamedDeclaration(path) {
            var _a;
            (_a = path.get('specifiers')) === null || _a === void 0 ? void 0 : _a.forEach(({ node }) => {
                if (t.isExportSpecifier(node) && t.isIdentifier(node.exported, { name: 'default' })) {
                    result = { path, node: node.local };
                    path.stop();
                }
            });
        },
    });
    return result;
};
exports.getDefaultExport = getDefaultExport;
/**
 * Find a named export in a file and return the export's node and path.
 *
 * Handles the two types of named exports:
 *
 * Variable declaration:
 * `export const blue = 'blue';`
 * Will return the identifier node for `blue`.
 *
 * Export specifier:
 * ```
 * const color = 'blue';
 * export { color };
 * ```
 * Will return the identifier node for `color`.
 *
 * @param ast File we want to traverse.
 * @param exportName Name of the export we're looking for.
 */
const getNamedExport = (ast, exportName) => {
    let result;
    (0, traverse_1.default)(ast, {
        ExportNamedDeclaration(path) {
            const { node } = path;
            const declarations = t.isVariableDeclaration(node.declaration)
                ? node.declaration.declarations
                : node.specifiers;
            declarations.find((declaration) => {
                const identifier = t.isVariableDeclarator(declaration)
                    ? declaration.id
                    : declaration.exported;
                if (t.isIdentifier(identifier, { name: exportName })) {
                    result = {
                        path,
                        node: t.isVariableDeclarator(declaration) ? declaration.init : identifier,
                    };
                    path.stop();
                    return true;
                }
                return false;
            });
        },
    });
    return result;
};
exports.getNamedExport = getNamedExport;
//# sourceMappingURL=get-export.js.map