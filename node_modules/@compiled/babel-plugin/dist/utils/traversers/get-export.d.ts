import * as t from '@babel/types';
import type { Result } from './types';
/**
 * Find the default export of a file and return the export's node and path.
 *
 * E.g: `export default 'blue';`
 * Will return the string literal node for 'blue'.
 *
 * E.g: `export default color;`
 * Will return the identifier node for `color`.
 *
 * @param ast File we want to traverse.
 */
export declare const getDefaultExport: (ast: t.File) => Result<t.ExportDefaultDeclaration> | undefined;
/**
 * Find a named export in a file and return the export's node and path.
 *
 * Handles the two types of named exports:
 *
 * Variable declaration:
 * `export const blue = 'blue';`
 * Will return the identifier node for `blue`.
 *
 * Export specifier:
 * ```
 * const color = 'blue';
 * export { color };
 * ```
 * Will return the identifier node for `color`.
 *
 * @param ast File we want to traverse.
 * @param exportName Name of the export we're looking for.
 */
export declare const getNamedExport: (ast: t.File, exportName: string) => Result<t.ExportNamedDeclaration> | undefined;
