"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setImportedCompiledImports = void 0;
const traverse_1 = __importDefault(require("@babel/traverse"));
const t = __importStar(require("@babel/types"));
/**
 * CompiledImports are checked in the entry file, but not when resolving bindings.
 * Update state if imported file uses a Compiled API.
 *
 * @param ast File we want to traverse.
 * @param state State of the current plugin run
 */
const setImportedCompiledImports = (ast, state) => {
    const apiName = 'css';
    (0, traverse_1.default)(ast, {
        ImportDeclaration(path) {
            var _a;
            (_a = path.get('specifiers')) === null || _a === void 0 ? void 0 : _a.forEach(({ node }) => {
                if (!t.isImportSpecifier(node)) {
                    return;
                }
                state.importedCompiledImports = state.importedCompiledImports || {};
                if (t.isIdentifier(node === null || node === void 0 ? void 0 : node.imported) && (node === null || node === void 0 ? void 0 : node.imported.name) === apiName) {
                    state.importedCompiledImports[apiName] = node.local.name;
                    path.stop();
                }
            });
        },
    });
};
exports.setImportedCompiledImports = setImportedCompiledImports;
//# sourceMappingURL=set-imported-compiled-imports.js.map