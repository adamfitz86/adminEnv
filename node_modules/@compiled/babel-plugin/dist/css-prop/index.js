"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.visitCssPropPath = void 0;
const t = __importStar(require("@babel/types"));
const constants_1 = require("../constants");
const build_compiled_component_1 = require("../utils/build-compiled-component");
const comments_1 = require("../utils/comments");
const css_builders_1 = require("../utils/css-builders");
const getJsxAttributeExpression = (node) => {
    if (t.isStringLiteral(node.value)) {
        return node.value;
    }
    if (t.isJSXExpressionContainer(node.value)) {
        return node.value.expression;
    }
    throw new Error('Value of JSX attribute was unexpected.');
};
const isCssPropDisabled = (path, meta) => {
    const { before, current } = (0, comments_1.getNodeComments)(path, meta);
    // Disable the prop if there's a disable next line comment or disable on current line
    return (before.some((comment) => comment.value
        .trim()
        .startsWith(`${constants_1.COMPILED_DIRECTIVE_DISABLE_NEXT_LINE} ${constants_1.COMPILED_DIRECTIVE_TRANSFORM_CSS_PROP}`)) ||
        current.some((comment) => comment.value
            .trim()
            .startsWith(`${constants_1.COMPILED_DIRECTIVE_DISABLE_LINE} ${constants_1.COMPILED_DIRECTIVE_TRANSFORM_CSS_PROP}`)));
};
/**
 * Takes a JSX opening element and then transforms any usage of `css` prop to a compiled component.
 *
 * `<div css={{}}>`
 *
 * @param path {NodePath} The opening JSX element
 * @param meta {Metadata} Useful metadata that can be used during the transformation
 */
const visitCssPropPath = (path, meta) => {
    let cssPropIndex = -1;
    const cssProp = path.get('attributes').find((attr, index) => {
        if (t.isJSXAttribute(attr.node) && attr.node.name.name === 'css') {
            cssPropIndex = index;
            return true;
        }
        return false;
    });
    if (!cssProp || !cssProp.node.value) {
        return;
    }
    // CSS prop disabled with comment directive (check both the JSX element and the css prop)
    if (isCssPropDisabled(path, meta) || isCssPropDisabled(cssProp, meta)) {
        return;
    }
    const cssOutput = (0, css_builders_1.buildCss)(getJsxAttributeExpression(cssProp.node), meta);
    // Remove css prop
    path.node.attributes.splice(cssPropIndex, 1);
    if (!cssOutput.css.length) {
        // No css was generated - return early!
        return;
    }
    path.parentPath.replaceWith((0, build_compiled_component_1.buildCompiledComponent)(path.parentPath.node, cssOutput, meta));
};
exports.visitCssPropPath = visitCssPropPath;
//# sourceMappingURL=index.js.map