"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transform = void 0;
const core_1 = require("@babel/core");
const utils_1 = require("@compiled/utils");
const prettier_1 = require("prettier");
const babel_plugin_1 = __importDefault(require("./babel-plugin"));
const transform = (code, options = {}) => {
    var _a;
    const { comments = false, filename, highlightCode, pretty = true, snippet, optimizeCss = false } = options, pluginOptions = __rest(options, ["comments", "filename", "highlightCode", "pretty", "snippet", "optimizeCss"]);
    const fileResult = (0, core_1.transformSync)(code, {
        babelrc: false,
        comments,
        compact: !pretty,
        configFile: false,
        filename,
        highlightCode,
        plugins: [[babel_plugin_1.default, Object.assign({ optimizeCss }, pluginOptions)]],
        presets: pluginOptions.importReact === false
            ? [['@babel/preset-react', { runtime: 'automatic' }]]
            : [],
        parserOpts: {
            plugins: (_a = pluginOptions.parserBabelPlugins) !== null && _a !== void 0 ? _a : utils_1.DEFAULT_PARSER_BABEL_PLUGINS,
        },
    });
    if (!fileResult || !fileResult.code) {
        return '';
    }
    const { code: babelCode } = fileResult;
    let codeSnippet;
    if (snippet) {
        const ifIndex = babelCode.indexOf('if (process.env.NODE_ENV');
        // Remove the imports from the code, and the styled components display name
        codeSnippet = babelCode
            .substring(babelCode.indexOf('const'), ifIndex === -1 ? babelCode.length : ifIndex)
            .trim();
    }
    else {
        codeSnippet = babelCode;
    }
    return pretty ? (0, prettier_1.format)(codeSnippet, { parser: 'babel-ts' }) : codeSnippet;
};
exports.transform = transform;
//# sourceMappingURL=test-utils.js.map