"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.visitXcssPropPath = void 0;
const t = __importStar(require("@babel/types"));
const ast_1 = require("../utils/ast");
const build_compiled_component_1 = require("../utils/build-compiled-component");
const css_builders_1 = require("../utils/css-builders");
const transform_css_items_1 = require("../utils/transform-css-items");
function getJsxAttributeExpressionContainer(path) {
    if ((path === null || path === void 0 ? void 0 : path.node) && t.isJSXExpressionContainer(path.node.value)) {
        return path.node.value;
    }
    return undefined;
}
function staticObjectInvariant(expression, meta) {
    const path = (0, ast_1.getPathOfNode)(expression, meta.parentPath);
    if (path.evaluate().confident) {
        return;
    }
    throw (0, ast_1.buildCodeFrameError)('Object given to the xcss prop must be static', expression, meta.parentPath);
}
function collectPathMemberExpressionIdentifiers(propPath) {
    const identifiers = [];
    propPath.traverse({
        MemberExpression(node) {
            if (node.node.object.type === 'Identifier') {
                identifiers.push(node.node.object);
            }
        },
    });
    return identifiers;
}
function collectPassStyles(meta, identifiers) {
    const styles = [];
    for (const key in meta.state.cssMap) {
        if (identifiers.includes(key)) {
            styles.push(...meta.state.cssMap[key]);
        }
    }
    return styles;
}
const visitXcssPropPath = (path, meta) => {
    if (meta.state.transformCache.has(path)) {
        // This path has been transformed so we skip.
        return;
    }
    meta.state.transformCache.set(path, true);
    const jsxElementNode = path.parentPath.node;
    const propPath = path.get('attributes').find((attr) => {
        if (t.isJSXAttribute(attr.node) && `${attr.node.name.name}`.toLowerCase().endsWith('xcss')) {
            return true;
        }
        return false;
    });
    const container = getJsxAttributeExpressionContainer(propPath);
    if (!propPath || !container || container.expression.type === 'JSXEmptyExpression') {
        // Nothing to do — bail out!
        return;
    }
    if (container.expression.type === 'ObjectExpression') {
        // An inline object expression has been passed, throw if it has any identifiers.
        staticObjectInvariant(container.expression, meta);
        const cssOutput = (0, css_builders_1.buildCss)(container.expression, meta);
        const { sheets, classNames } = (0, transform_css_items_1.transformCssItems)(cssOutput.css, meta);
        switch (classNames.length) {
            case 1:
                // Replace xcss prop with class names
                // Remeber: The object has a type constraint to always be a basic object with no values.
                container.expression = classNames[0];
                break;
            case 0:
                // No styles were merged so we replace with an undefined identifier.
                container.expression = t.identifier('undefined');
                break;
            default:
                throw (0, ast_1.buildCodeFrameError)('Unexpected count of class names please raise an issue on Github', propPath.node, meta.parentPath);
        }
        meta.state.usesXcss = true;
        path.parentPath.replaceWith((0, build_compiled_component_1.compiledTemplate)(jsxElementNode, sheets, meta));
    }
    else {
        // We make the assumption that xcss prop only takes member expressions such as:
        // 1. Dot notation, such as "styles.text"
        // 2. Bracket notation, such as "styles[appearance]"
        const identifiers = collectPathMemberExpressionIdentifiers(propPath);
        identifiers.forEach((identifier) => {
            (0, css_builders_1.generateCacheForCSSMap)(identifier, meta);
        });
        const sheets = collectPassStyles(meta, identifiers.map((identifier) => identifier.name));
        if (sheets.length === 0) {
            // No sheets were extracted — bail out from the transform.
            // This covers the legacy use case of runtime xcss prop.
            return;
        }
        meta.state.usesXcss = true;
        path.parentPath.replaceWith((0, build_compiled_component_1.compiledTemplate)(jsxElementNode, sheets, meta));
    }
};
exports.visitXcssPropPath = visitXcssPropPath;
//# sourceMappingURL=index.js.map