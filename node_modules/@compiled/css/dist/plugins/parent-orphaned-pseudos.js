"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.postcss = exports.parentOrphanedPseudos = void 0;
const postcss_selector_parser_1 = __importDefault(require("postcss-selector-parser"));
const prependNestingTypeToSelector = (selector) => {
    const { parent } = selector;
    if (parent) {
        const nesting = postcss_selector_parser_1.default.nesting();
        parent.insertBefore(selector, nesting);
    }
};
/**
 * Parent orphened pseudos PostCSS plugin.
 * This plugin will move child nested orphened pseudos to the parent declaration.
 *
 * E.g: `.class { &:hover {} }` will become `.class:hover {}`
 *
 * Requires the use of Once over Rule else it runs into conflicts with the postcss-nested plugin
 */
const parentOrphanedPseudos = () => {
    return {
        postcssPlugin: 'parent-orphened-pseudos',
        Once(root) {
            root.walkRules((rule) => {
                const { selectors } = rule;
                rule.selectors = selectors.map((selector) => {
                    if (!selector.startsWith(':')) {
                        return selector;
                    }
                    const parser = (0, postcss_selector_parser_1.default)((root) => {
                        root.walkPseudos((pseudoSelector) => {
                            prependNestingTypeToSelector(pseudoSelector);
                        });
                    }).astSync(selector, { lossless: false });
                    return parser.toString();
                });
            });
        },
    };
};
exports.parentOrphanedPseudos = parentOrphanedPseudos;
exports.postcss = true;
//# sourceMappingURL=parent-orphaned-pseudos.js.map