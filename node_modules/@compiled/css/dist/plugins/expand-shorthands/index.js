"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.postcss = exports.expandShorthands = void 0;
const postcss_values_parser_1 = require("postcss-values-parser");
const background_1 = require("./background");
const flex_1 = require("./flex");
const flex_flow_1 = require("./flex-flow");
const margin_1 = require("./margin");
const outline_1 = require("./outline");
const overflow_1 = require("./overflow");
const padding_1 = require("./padding");
const place_content_1 = require("./place-content");
const place_items_1 = require("./place-items");
const place_self_1 = require("./place-self");
const text_decoration_1 = require("./text-decoration");
const shorthands = {
    // These properties are fully expanded
    margin: margin_1.margin,
    padding: padding_1.padding,
    'place-content': place_content_1.placeContent,
    'place-items': place_items_1.placeItems,
    'place-self': place_self_1.placeSelf,
    overflow: overflow_1.overflow,
    flex: flex_1.flex,
    'flex-flow': flex_flow_1.flexFlow,
    outline: outline_1.outline,
    'text-decoration': text_decoration_1.textDecoration,
    // These properties are partially expanded
    background: background_1.background,
    // These properties are excluded for now but will be ordered when building production.
    /**
     * border
     * border-top
     * border-right
     * border-left
     * border-bottom
     * border-color
     * border-radius
     * border-style
     * border-width
     * column-rule'
     * list-style'
     * columns
     * animation
     * transition
     * font
     * grid-column
     * grid-row
     * grid-template
     * grid
     * grid-area
     * offset
     */
};
const valueIsNotSafeToExpand = (node) => {
    // This is the case where a CSS variable is given as the value, e.g.
    // `padding: var(--_fl6vf6)`. Value of _fl6vf6 is unknown, so this
    // cannot be expanded safely.
    //
    // https://github.com/atlassian-labs/compiled/issues/1331
    return node.type === 'func' && node.isVar;
};
/**
 * PostCSS plugin that expands shortform properties to their longform equivalents.
 */
const expandShorthands = () => {
    return {
        postcssPlugin: 'expand-shorthands',
        Declaration(decl) {
            const expand = shorthands[decl.prop];
            /** Return early if no matching property to expand */
            if (!expand) {
                return;
            }
            const valueNode = (0, postcss_values_parser_1.parse)(decl.value);
            if (valueNode.nodes.some(valueIsNotSafeToExpand)) {
                return;
            }
            const longforms = expand(valueNode);
            if (!longforms) {
                throw new Error('Longform properties were not returned!');
            }
            /** Return early if not replacing a node */
            if (longforms.length === 1 && longforms[0].prop === undefined) {
                return;
            }
            const nodes = longforms.map((val) => {
                const newNode = decl.clone(Object.assign(Object.assign({}, val), { 
                    // Value needs to be a string else autoprefixer blows up.
                    value: `${val.value}` }));
                return newNode;
            });
            decl.replaceWith(nodes);
        },
    };
};
exports.expandShorthands = expandShorthands;
exports.postcss = true;
//# sourceMappingURL=index.js.map