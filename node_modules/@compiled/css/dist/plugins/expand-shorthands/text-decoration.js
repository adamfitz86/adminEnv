"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.textDecoration = void 0;
const utils_1 = require("./utils");
/**
 * https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration
 */
const textDecoration = (value) => {
    const [left, middle, right] = value.nodes;
    const lineValues = [...utils_1.globalValues, 'none', 'underline', 'overline', 'line-through', 'blink'];
    const styleValues = [...utils_1.globalValues, 'solid', 'double', 'dotted', 'dashed', 'wavy'];
    const lineValue = [];
    let colorValue = '';
    let styleValue = '';
    /**
     * Extracts values from a node and mutates variables in scope.
     * If it returns `true` we should bail out and return no nodes.
     *
     * @param node
     */
    const extractValues = (node) => {
        if (node && node.type === 'word') {
            if (lineValues.includes(node.value)) {
                if (lineValue.length === 0 || !lineValue.includes(node.value)) {
                    lineValue.push(node.value);
                }
                else {
                    // Invalid, bail out!
                    return true;
                }
            }
            else if ((0, utils_1.isColor)(node)) {
                colorValue = node.value;
            }
            else if (styleValues.includes(node.value)) {
                styleValue = node.value;
            }
        }
        return false;
    };
    if (extractValues(left) || extractValues(middle) || extractValues(right)) {
        return [];
    }
    lineValue.sort(); // Ensure the sorting is always in the same order.
    const resolvedLineValue = lineValue.length ? lineValue.join(' ') : 'none';
    return [
        { prop: 'text-decoration-color', value: colorValue || 'currentColor' },
        { prop: 'text-decoration-line', value: resolvedLineValue },
        { prop: 'text-decoration-style', value: styleValue || 'solid' },
    ];
};
exports.textDecoration = textDecoration;
//# sourceMappingURL=text-decoration.js.map