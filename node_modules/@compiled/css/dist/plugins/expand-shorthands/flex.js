"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.flex = void 0;
const utils_1 = require("./utils");
// According to the spec, the default value of flex-basis is 0.
// However, '0%' is used by major browsers due to compatibility issues
// https://github.com/w3c/csswg-drafts/issues/5742
const flexBasisDefaultValue = '0%';
const isFlexNumber = (node) => node.type === 'numeric' && !node.unit;
const isFlexBasis = (node) => (node.type === 'word' && node.value === 'content') ||
    (node.type === 'numeric' && node.unit === '' && node.value === '0') ||
    (0, utils_1.isWidth)(node);
const getBasisWidth = (node) => node.type === 'numeric' && node.value === '0' && node.unit === ''
    ? flexBasisDefaultValue
    : (0, utils_1.getWidth)(node);
/**
 * https://drafts.csswg.org/css-flexbox-1/#flex-property
 */
const flex = (value) => {
    const [left, middle, right] = value.nodes;
    switch (value.nodes.length) {
        case 1: {
            if (left.type === 'word') {
                if (left.value === 'auto') {
                    // `flex: 'auto'` is equivalent to `flex: '1 1 auto'`
                    return [
                        { prop: 'flex-grow', value: 1 },
                        { prop: 'flex-shrink', value: 1 },
                        { prop: 'flex-basis', value: 'auto' },
                    ];
                }
                if (left.value === 'none') {
                    // `flex: 'none'` is equivalent to `flex: '0 0 auto'`
                    return [
                        { prop: 'flex-grow', value: 0 },
                        { prop: 'flex-shrink', value: 0 },
                        { prop: 'flex-basis', value: 'auto' },
                    ];
                }
                if (left.value === 'initial') {
                    // `flex: 'initial'` is equivalent to `flex: '0 1 auto'`
                    return [
                        { prop: 'flex-grow', value: 0 },
                        { prop: 'flex-shrink', value: 1 },
                        { prop: 'flex-basis', value: 'auto' },
                    ];
                }
                if (left.value === 'revert' ||
                    left.value === 'revert-layer' ||
                    left.value === 'unset' ||
                    left.value === 'inherit') {
                    // Early exit, simply `flex: 'inherit'` (etc)
                    // NOTE: This doesn't even take this `value`, simply omitting the `prop` key is the early exit
                    return [{ value: left.value }];
                }
            }
            else if (isFlexNumber(left)) {
                // the value should map to `flex-grow`
                return [
                    { prop: 'flex-grow', value: left.value },
                    { prop: 'flex-shrink', value: 1 },
                    { prop: 'flex-basis', value: flexBasisDefaultValue },
                ];
            }
            else if (isFlexBasis(left)) {
                // we assume that the value should map to `flex-basis`
                return [
                    { prop: 'flex-grow', value: 1 },
                    { prop: 'flex-shrink', value: 1 },
                    { prop: 'flex-basis', value: (0, utils_1.getWidth)(left) },
                ];
            }
            break;
        }
        case 2: {
            if (isFlexNumber(left)) {
                if (isFlexNumber(middle)) {
                    // flex grow and flex shrink
                    return [
                        { prop: 'flex-grow', value: left.value },
                        { prop: 'flex-shrink', value: middle.value },
                        { prop: 'flex-basis', value: flexBasisDefaultValue },
                    ];
                }
                else if (isFlexBasis(middle)) {
                    // flex grow and flex basis
                    return [
                        { prop: 'flex-grow', value: left.value },
                        { prop: 'flex-shrink', value: 1 },
                        { prop: 'flex-basis', value: (0, utils_1.getWidth)(middle) },
                    ];
                }
            }
            break;
        }
        case 3: {
            if (isFlexNumber(left) && isFlexNumber(middle) && isFlexBasis(right)) {
                // flex grow, flex shrink, and flex basis
                return [
                    { prop: 'flex-grow', value: left.value },
                    { prop: 'flex-shrink', value: middle.value },
                    { prop: 'flex-basis', value: getBasisWidth(right) },
                ];
            }
            break;
        }
    }
    // Invalid CSS
    return [];
};
exports.flex = flex;
//# sourceMappingURL=flex.js.map