"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWidth = exports.isWidth = exports.isColor = exports.globalValues = void 0;
/**
 * Common global values
 */
exports.globalValues = ['inherit', 'initial', 'unset', 'revert', 'revert-layer'];
/**
 * Returns `true` if the node is a color,
 * else `false`.
 *
 * @param node
 */
const isColor = (node) => {
    if ((node.type === 'word' || node.type === 'func') && node.isColor)
        return true;
    // https://drafts.csswg.org/css-color/#named-colors two special words aren't included in `isColor`
    return node.type === 'word' && ['transparent', 'currentcolor'].includes(node.value);
};
exports.isColor = isColor;
const widthUnits = new Set([
    '%',
    'cap',
    'ch',
    'cm',
    'em',
    'ex',
    'fr',
    'ic',
    'in',
    'lh',
    'mm',
    'pc',
    'pt',
    'px',
    'Q',
    'rem',
    'rlh',
    'vb',
    'vh',
    'vi',
    'vmax',
    'vmin',
    'vw',
]);
/**
 * Returns `true` if the node is a width,
 * else `false`.
 *
 * @param node
 */
const isWidth = (node) => {
    if (node.type === 'numeric' && widthUnits.has(node.unit)) {
        return true;
    }
    if (node.type === 'word' &&
        [...exports.globalValues, 'auto', 'min-content', 'max-content', 'fit-content'].includes(node.value)) {
        return true;
    }
    if (node.type === 'func') {
        // We don't want to be strict about functions, as we don't know the return type
        return true;
    }
    return false;
};
exports.isWidth = isWidth;
/**
 * Returns calculated width of a node.
 *
 * @param node
 */
const getWidth = (node) => {
    if (node.type === 'numeric') {
        return `${node.value}${node.unit}`;
    }
    if (node.type === 'func') {
        return `${node.name}${node.params}`;
    }
    return node.value;
};
exports.getWidth = getWidth;
//# sourceMappingURL=utils.js.map