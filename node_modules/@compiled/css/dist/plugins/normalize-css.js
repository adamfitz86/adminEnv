"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeCSS = void 0;
const cssnano_preset_default_1 = __importDefault(require("cssnano-preset-default"));
const normalize_current_color_1 = require("./normalize-current-color");
/**
 * These plugins are ran on production builds to ensure the minimal amount of CSS is generated.
 */
const PROD_PLUGINS = [
    // Order CSS declaration values so any combination results in the same atomic rule.
    'postcss-ordered-values',
    // Replace values to equivalent smaller values.
    'postcss-reduce-initial',
    'postcss-convert-values',
    // Normalize color values
    'postcss-colormin',
    // Normalize specific values so they are all equivalent.
    'postcss-normalize-url',
    'postcss-normalize-unicode',
    'postcss-normalize-string',
    'postcss-normalize-positions',
    'postcss-normalize-timing-functions',
    // Make gradients as small as possible.
    'postcss-minify-gradients',
    // Throw away comments
    'postcss-discard-comments',
    // Reduce CSS calc expressions if possible.
    'postcss-calc',
];
/**
 * These plugins are always ran on any run.
 */
const BASE_PLUGINS = [
    // This ensures all selectors are the same even with different white space
    'postcss-minify-selectors',
    // This ensures all at-rules are the same even with different white space
    'postcss-minify-params',
];
/**
 * This plugin runs cssnao plugins to normalize CSS during build.
 * If consumers opt out the default behaviour, it will run a subset of the plugins.
 *
 * @param opts Transformation options
 */
const normalizeCSS = (opts) => {
    const { optimizeCss = true } = opts;
    const preset = (0, cssnano_preset_default_1.default)();
    // We exclude async because we need this to run synchronously as ts transformers aren't async!
    const extraPlugins = optimizeCss ? PROD_PLUGINS : [];
    const pluginsToInclude = BASE_PLUGINS.concat(extraPlugins);
    const normalizePlugins = preset.plugins
        .map(([creator]) => {
        // replicate the `initializePlugin` behavior from https://github.com/cssnano/cssnano/blob/a566cc5/packages/cssnano/src/index.js#L8
        return creator();
    })
        .filter((plugin) => {
        return pluginsToInclude.includes(plugin.postcssPlugin);
    });
    // These plugins are custom ones that gap functionality not provided by cssmin.
    if (optimizeCss) {
        normalizePlugins.push((0, normalize_current_color_1.normalizeCurrentColor)());
    }
    return normalizePlugins;
};
exports.normalizeCSS = normalizeCSS;
//# sourceMappingURL=normalize-css.js.map