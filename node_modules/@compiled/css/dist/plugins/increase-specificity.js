"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.increaseSpecificity = void 0;
const utils_1 = require("@compiled/utils");
const postcss_selector_parser_1 = __importStar(require("postcss-selector-parser"));
const parser = (0, postcss_selector_parser_1.default)((root) => {
    root.walkClasses((node) => {
        if (node.parent) {
            node.parent.insertAfter(node, (0, postcss_selector_parser_1.pseudo)({ value: utils_1.INCREASE_SPECIFICITY_SELECTOR }));
        }
    });
});
/**
 * Increase the specificity of classes generated in Compiled by appended ":not(#\\#)".
 * This rule should run after CSS declarations have been atomicized and should not affect
 * the original generated class name.
 *
 * This means generated class names with / without the increased specificity are the same,
 * so when running Compiled together with (in product) + without it (in platform) they will
 * keep the deterministic behaviour of the last declared style wins, but enjoying increased
 * specificity when used in non-Compiled contexts for migration purposes, e.g. xcss prop
 * being passed to Emotion CSS-in-JS!
 */
const increaseSpecificity = () => {
    return {
        postcssPlugin: 'increase-specificity',
        OnceExit(root) {
            root.walkRules((rule) => {
                rule.selectors = rule.selectors.map((selector) => {
                    if (selector.includes('._')) {
                        // This rule should only apply to Compiled generated class names.
                        return parser.astSync(selector).toString();
                    }
                    return selector;
                });
            });
        },
    };
};
exports.increaseSpecificity = increaseSpecificity;
//# sourceMappingURL=increase-specificity.js.map